/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.tictactoe;

import static com.mysql.cj.telemetry.TelemetryAttribute.DB_USER;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.io.*;

/**
 *
 * @author TraderG
 */

public class AdminPage extends javax.swing.JFrame {

    /**
     * Creates new form AdminPage
     */
    public AdminPage() {
        try {
        Class.forName("com.mysql.cj.jdbc.Driver");
    } catch (ClassNotFoundException ex) {
        JOptionPane.showMessageDialog(this, "MySQL driver not found: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        System.exit(1);
    }
    initComponents();
    }
    private static final String DB_URL = "jdbc:mysql://localhost:3306/tictactoe_db?zeroDateTimeBehavior=CONVERT_TO_NULL";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "admin123";
    private void loadPlayers(DefaultTableModel tableModel, String searchTerm) {
    tableModel.setRowCount(0);
    String query = "SELECT p.player_id, p.player_name, s.wins, s.losses, s.draws " +
                   "FROM players p LEFT JOIN scores s ON p.player_id = s.player_id";
    if (searchTerm != null && !searchTerm.isEmpty()) {
        query += " WHERE p.player_name LIKE ?";
    }
    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
         PreparedStatement pstmt = conn.prepareStatement(query)) {
        if (searchTerm != null && !searchTerm.isEmpty()) {
            pstmt.setString(1, "%" + searchTerm + "%");
        }
        ResultSet rs = pstmt.executeQuery();
        while (rs.next()) {
            tableModel.addRow(new Object[]{
                rs.getInt("player_id"),
                rs.getString("player_name"),
                rs.getInt("wins"),
                rs.getInt("losses"),
                rs.getInt("draws")
            });
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading players: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnback = new javax.swing.JButton();
        btnplayermanagement = new javax.swing.JButton();
        btnhistory = new javax.swing.JButton();
        PlayerProfile3 = new javax.swing.JLabel();
        PlayerProfile4 = new javax.swing.JLabel();
        PlayerProfile5 = new javax.swing.JLabel();
        PlayerProfile6 = new javax.swing.JLabel();
        PlayerProfile7 = new javax.swing.JLabel();
        PlayerProfile8 = new javax.swing.JLabel();
        PlayerProfile9 = new javax.swing.JLabel();
        PlayerProfile10 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        PlayerProfile2 = new javax.swing.JLabel();
        btndataexport1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(153, 153, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Admin Page");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 280, 60));

        btnback.setBackground(new java.awt.Color(0, 0, 0));
        btnback.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnback.setForeground(new java.awt.Color(255, 255, 255));
        btnback.setText("Back");
        btnback.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnback.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });
        jPanel1.add(btnback, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 400, 300, 40));

        btnplayermanagement.setBackground(new java.awt.Color(0, 0, 0));
        btnplayermanagement.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnplayermanagement.setForeground(new java.awt.Color(255, 255, 255));
        btnplayermanagement.setText("Player Management");
        btnplayermanagement.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnplayermanagement.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnplayermanagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnplayermanagementActionPerformed(evt);
            }
        });
        jPanel1.add(btnplayermanagement, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, 300, 40));

        btnhistory.setBackground(new java.awt.Color(0, 0, 0));
        btnhistory.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnhistory.setForeground(new java.awt.Color(255, 255, 255));
        btnhistory.setText("History");
        btnhistory.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnhistory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnhistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhistoryActionPerformed(evt);
            }
        });
        jPanel1.add(btnhistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 300, 300, 40));

        PlayerProfile3.setIcon(new javax.swing.ImageIcon("C:\\Users\\TraderG\\Downloads\\PROJECTS\\TicTacToe\\src\\main\\java\\com\\tictactoe\\icons\\tic-tac-toe resize.png")); // NOI18N
        jPanel1.add(PlayerProfile3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 670, -1, -1));

        PlayerProfile4.setIcon(new javax.swing.ImageIcon("C:\\Users\\TraderG\\Downloads\\PROJECTS\\TicTacToe\\src\\main\\java\\com\\tictactoe\\icons\\tic-tac-toe resize.png")); // NOI18N
        jPanel1.add(PlayerProfile4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 770, -1, -1));

        PlayerProfile5.setIcon(new javax.swing.ImageIcon("C:\\Users\\TraderG\\Downloads\\PROJECTS\\TicTacToe\\src\\main\\java\\com\\tictactoe\\icons\\tic-tac-toe resize.png")); // NOI18N
        jPanel1.add(PlayerProfile5, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, 440, -1, -1));

        PlayerProfile6.setIcon(new javax.swing.ImageIcon("C:\\Users\\TraderG\\Downloads\\PROJECTS\\TicTacToe\\src\\main\\java\\com\\tictactoe\\icons\\tic-tac-toe resize.png")); // NOI18N
        jPanel1.add(PlayerProfile6, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, 440, -1, -1));

        PlayerProfile7.setIcon(new javax.swing.ImageIcon("C:\\Users\\TraderG\\Downloads\\PROJECTS\\TicTacToe\\src\\main\\java\\com\\tictactoe\\icons\\tic-tac-toe resize.png")); // NOI18N
        jPanel1.add(PlayerProfile7, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 610, -1, -1));

        PlayerProfile8.setIcon(new javax.swing.ImageIcon("C:\\Users\\TraderG\\Downloads\\PROJECTS\\TicTacToe\\src\\main\\java\\com\\tictactoe\\icons\\tic-tac-toe resize.png")); // NOI18N
        jPanel1.add(PlayerProfile8, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 410, -1, -1));

        PlayerProfile9.setIcon(new javax.swing.ImageIcon("C:\\Users\\TraderG\\Downloads\\PROJECTS\\TicTacToe\\src\\main\\java\\com\\tictactoe\\icons\\tic-tac-toe resize.png")); // NOI18N
        jPanel1.add(PlayerProfile9, new org.netbeans.lib.awtextra.AbsoluteConstraints(-30, -30, -1, -1));

        PlayerProfile10.setIcon(new javax.swing.ImageIcon("C:\\Users\\TraderG\\Downloads\\PROJECTS\\TicTacToe\\src\\main\\java\\com\\tictactoe\\icons\\tic-tac-toe resize.png")); // NOI18N
        jPanel1.add(PlayerProfile10, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 20, -1, -1));

        PlayerProfile2.setIcon(new javax.swing.ImageIcon("C:\\Users\\TraderG\\Downloads\\PROJECTS\\TicTacToe\\src\\main\\java\\com\\tictactoe\\icons\\Profile Resize.png")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PlayerProfile2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PlayerProfile2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, -1, -1));

        btndataexport1.setBackground(new java.awt.Color(0, 0, 0));
        btndataexport1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btndataexport1.setForeground(new java.awt.Color(255, 255, 255));
        btndataexport1.setText("Data Export ");
        btndataexport1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btndataexport1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btndataexport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndataexport1ActionPerformed(evt);
            }
        });
        jPanel1.add(btndataexport1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 350, 300, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 850));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    

private void loadGames(DefaultTableModel tableModel, String searchTerm, String winnerFilter) {
    tableModel.setRowCount(0);
    String query = "SELECT g.game_id, px.player_name AS player_x, po.player_name AS player_o, " +
                   "pw.player_name AS winner, g.game_date, g.moves " +
                   "FROM games g " +
                   "LEFT JOIN players px ON g.player_x_id = px.player_id " +
                   "LEFT JOIN players po ON g.player_o_id = po.player_id " +
                   "LEFT JOIN players pw ON g.winner_id = pw.player_id";
    String whereClause = "";
    if (searchTerm != null && !searchTerm.isEmpty()) {
        whereClause = " WHERE (px.player_name LIKE ? OR po.player_name LIKE ? OR pw.player_name LIKE ?)";
    }
    if (!winnerFilter.equals("All")) {
        if (!whereClause.isEmpty()) {
            whereClause += " AND ";
        } else {
            whereClause = " WHERE ";
        }
        if (winnerFilter.equals("Draw")) {
            whereClause += "g.winner_id IS NULL";
        } else if (winnerFilter.equals("Player X")) {
            whereClause += "g.winner_id = g.player_x_id";
        } else if (winnerFilter.equals("Player O")) {
            whereClause += "g.winner_id = g.player_o_id";
        }
    }
    query += whereClause;
    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
         PreparedStatement pstmt = conn.prepareStatement(query)) {
        int paramIndex = 1;
        if (searchTerm != null && !searchTerm.isEmpty()) {
            pstmt.setString(paramIndex++, "%" + searchTerm + "%");
            pstmt.setString(paramIndex++, "%" + searchTerm + "%");
            pstmt.setString(paramIndex++, "%" + searchTerm + "%");
        }
        ResultSet rs = pstmt.executeQuery();
        while (rs.next()) {
            String winner = rs.getString("winner") != null ? rs.getString("winner") : "Draw";
            tableModel.addRow(new Object[]{
                rs.getInt("game_id"),
                rs.getString("player_x"),
                rs.getString("player_o"),
                winner,
                rs.getString("game_date"),
                rs.getString("moves")
            });
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading games: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        javax.swing.SwingUtilities.invokeLater(() -> {
            GamePage gamepage = new GamePage();
            gamepage.setVisible(true);
        });
        this.dispose();
    }//GEN-LAST:event_btnbackActionPerformed

    private void btnplayermanagementActionPerformed(java.awt.event.ActionEvent evt) {
    JDialog playerDialog = new JDialog(this, "Player Management", true);
    playerDialog.setSize(600, 400);
    playerDialog.setLocationRelativeTo(this);
    playerDialog.setLayout(new BorderLayout());

    // JTable for players and scores
    String[] columns = {"ID", "Name", "Wins", "Losses", "Draws"};
    DefaultTableModel tableModel = new DefaultTableModel(columns, 0);
    JTable playerTable = new JTable(tableModel);
    JScrollPane scrollPane = new JScrollPane(playerTable);
    playerDialog.add(scrollPane, BorderLayout.CENTER);

    // Input panel
    JPanel inputPanel = new JPanel(new GridLayout(2, 2));
    JTextField nameField = new JTextField(15);
    JTextField searchField = new JTextField(15);
    inputPanel.add(new JLabel("Player Name:"));
    inputPanel.add(nameField);
    inputPanel.add(new JLabel("Search Name:"));
    inputPanel.add(searchField);

    // Button panel
    JPanel buttonPanel = new JPanel(new FlowLayout());
    JButton addButton = new JButton("Add");
    JButton updateButton = new JButton("Update");
    JButton deleteButton = new JButton("Delete");
    JButton resetScoresButton = new JButton("Reset All Scores");
    JButton searchButton = new JButton("Search");
    buttonPanel.add(addButton);
    buttonPanel.add(updateButton);
    buttonPanel.add(deleteButton);
    buttonPanel.add(resetScoresButton);
    buttonPanel.add(searchButton);

    JPanel southPanel = new JPanel(new BorderLayout());
    southPanel.add(inputPanel, BorderLayout.NORTH);
    southPanel.add(buttonPanel, BorderLayout.SOUTH);
    playerDialog.add(southPanel, BorderLayout.SOUTH);

    loadPlayers(tableModel, null);

    // Add Player
    addButton.addActionListener(e -> {
        String name = nameField.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(playerDialog, "Player name cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            PreparedStatement pstmt = conn.prepareStatement("INSERT INTO players (player_name) VALUES (?)", Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, name);
            pstmt.executeUpdate();
            ResultSet rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                int playerId = rs.getInt(1);
                PreparedStatement scoreStmt = conn.prepareStatement("INSERT INTO scores (player_id, wins, losses, draws) VALUES (?, 0, 0, 0)");
                scoreStmt.setInt(1, playerId);
                scoreStmt.executeUpdate();
            }
            JOptionPane.showMessageDialog(playerDialog, "Player added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadPlayers(tableModel, null);
            nameField.setText("");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(playerDialog, "Error adding player: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    // Update Player
    updateButton.addActionListener(e -> {
        int selectedRow = playerTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(playerDialog, "Please select a player.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String name = nameField.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(playerDialog, "Player name cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int id = (int) tableModel.getValueAt(selectedRow, 0);
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            PreparedStatement pstmt = conn.prepareStatement("UPDATE players SET player_name = ? WHERE player_id = ?");
            pstmt.setString(1, name);
            pstmt.setInt(2, id);
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(playerDialog, "Player updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadPlayers(tableModel, null);
            nameField.setText("");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(playerDialog, "Error updating player: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    // Delete Player
    deleteButton.addActionListener(e -> {
        int selectedRow = playerTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(playerDialog, "Please select a player.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(playerDialog, "Delete this player and related data?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int id = (int) tableModel.getValueAt(selectedRow, 0);
            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                PreparedStatement gameStmt = conn.prepareStatement("DELETE FROM games WHERE player_x_id = ? OR player_o_id = ? OR winner_id = ?");
                gameStmt.setInt(1, id);
                gameStmt.setInt(2, id);
                gameStmt.setInt(3, id);
                gameStmt.executeUpdate();
                PreparedStatement scoreStmt = conn.prepareStatement("DELETE FROM scores WHERE player_id = ?");
                scoreStmt.setInt(1, id);
                scoreStmt.executeUpdate();
                PreparedStatement playerStmt = conn.prepareStatement("DELETE FROM players WHERE player_id = ?");
                playerStmt.setInt(1, id);
                playerStmt.executeUpdate();
                JOptionPane.showMessageDialog(playerDialog, "Player deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadPlayers(tableModel, null);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(playerDialog, "Error deleting player: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    // Reset All Scores
    resetScoresButton.addActionListener(e -> {
        int confirm = JOptionPane.showConfirmDialog(playerDialog, "Reset all scores?", "Confirm Reset", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                 PreparedStatement pstmt = conn.prepareStatement("UPDATE scores SET wins = 0, losses = 0, draws = 0")) {
                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(playerDialog, "All scores reset successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadPlayers(tableModel, null);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(playerDialog, "Error resetting scores: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    // Search Players
    searchButton.addActionListener(e -> {
        String searchTerm = searchField.getText().trim();
        loadPlayers(tableModel, searchTerm.isEmpty() ? null : searchTerm);
    });

    playerDialog.setVisible(true);
}

    private void btnhistoryActionPerformed(java.awt.event.ActionEvent evt) {
    JDialog historyDialog = new JDialog(this, "Game History", true);
    historyDialog.setSize(700, 400);
    historyDialog.setLocationRelativeTo(this);
    historyDialog.setLayout(new BorderLayout());

    // JTable for games
    String[] columns = {"Game ID", "Player X", "Player O", "Winner", "Date", "Moves"};
    DefaultTableModel tableModel = new DefaultTableModel(columns, 0);
    JTable gameTable = new JTable(tableModel);
    JScrollPane scrollPane = new JScrollPane(gameTable);
    historyDialog.add(scrollPane, BorderLayout.CENTER);

    // Filter panel
    JPanel filterPanel = new JPanel(new FlowLayout());
    JTextField searchField = new JTextField(15);
    JComboBox<String> winnerFilter = new JComboBox<>(new String[]{"All", "Player X", "Player O", "Draw"});
    JButton searchButton = new JButton("Search");
    JButton deleteButton = new JButton("Delete Game");
    JButton exportButton = new JButton("Export Games");
    filterPanel.add(new JLabel("Search Player:"));
    filterPanel.add(searchField);
    filterPanel.add(new JLabel("Winner:"));
    filterPanel.add(winnerFilter);
    filterPanel.add(searchButton);
    filterPanel.add(deleteButton);
    filterPanel.add(exportButton);
    historyDialog.add(filterPanel, BorderLayout.SOUTH);

    loadGames(tableModel, null, "All");

    // Search and Filter Games
    searchButton.addActionListener(e -> {
        String searchTerm = searchField.getText().trim();
        String winner = (String) winnerFilter.getSelectedItem();
        loadGames(tableModel, searchTerm.isEmpty() ? null : searchTerm, winner);
    });

    // Delete Game
    deleteButton.addActionListener(e -> {
        int selectedRow = gameTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(historyDialog, "Please select a game.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(historyDialog, "Delete this game?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int gameId = (int) tableModel.getValueAt(selectedRow, 0);
            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                 PreparedStatement pstmt = conn.prepareStatement("DELETE FROM games WHERE game_id = ?")) {
                pstmt.setInt(1, gameId);
                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(historyDialog, "Game deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadGames(tableModel, null, "All");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(historyDialog, "Error deleting game: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    // Export Games
    exportButton.addActionListener(e -> {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(
                     "SELECT g.game_id, px.player_name AS player_x, po.player_name AS player_o, pw.player_name AS winner, g.game_date, g.moves " +
                             "FROM games g " +
                             "LEFT JOIN players px ON g.player_x_id = px.player_id " +
                             "LEFT JOIN players po ON g.player_o_id = po.player_id " +
                             "LEFT JOIN players pw ON g.winner_id = pw.player_id")) {
            String desktopPath = System.getProperty("user.home") + "/Desktop/games_export.csv";
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(desktopPath))) {
                writer.write("Game ID,Player X,Player O,Winner,Date,Moves\n");
                while (rs.next()) {
                    String winner = rs.getString("winner") != null ? rs.getString("winner") : "Draw";
                    writer.write(String.format("%d,%s,%s,%s,%s,%s\n",
                            rs.getInt("game_id"),
                            rs.getString("player_x"),
                            rs.getString("player_o"),
                            winner,
                            rs.getString("game_date"),
                            rs.getString("moves")));
                }
                JOptionPane.showMessageDialog(historyDialog, "Games exported to " + desktopPath, "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(historyDialog, "Error exporting games: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    historyDialog.setVisible(true);
}

    private void btndataexport1ActionPerformed(java.awt.event.ActionEvent evt) {
    int confirm = JOptionPane.showConfirmDialog(this, "Export player data to CSV?", "Confirm Export", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(
                     "SELECT p.player_id, p.player_name, s.wins, s.losses, s.draws " +
                             "FROM players p LEFT JOIN scores s ON p.player_id = s.player_id")) {
            String desktopPath = System.getProperty("user.home") + "/Desktop/players_export.csv";
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(desktopPath))) {
                writer.write("ID,Name,Wins,Losses,Draws\n");
                while (rs.next()) {
                    writer.write(String.format("%d,%s,%d,%d,%d\n",
                            rs.getInt("player_id"),
                            rs.getString("player_name"),
                            rs.getInt("wins"),
                            rs.getInt("losses"),
                            rs.getInt("draws")));
                }
                JOptionPane.showMessageDialog(this, "Player data exported to " + desktopPath, "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException | IOException ex) {
            JOptionPane.showMessageDialog(this, "Error exporting data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

    // Helper method to load players into JTable
    private void loadPlayers(DefaultTableModel tableModel) {
        tableModel.setRowCount(0); // Clear existing rows
        try (Connection conn = DriverManager.getConnection("jdbc:sqlite:tictactoe.db");
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM players")) {
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                int wins = rs.getInt("wins");
                int losses = rs.getInt("losses");
                int draws = rs.getInt("draws");
                tableModel.addRow(new Object[]{id, name, wins, losses, draws});
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading players: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PlayerProfile10;
    private javax.swing.JLabel PlayerProfile2;
    private javax.swing.JLabel PlayerProfile3;
    private javax.swing.JLabel PlayerProfile4;
    private javax.swing.JLabel PlayerProfile5;
    private javax.swing.JLabel PlayerProfile6;
    private javax.swing.JLabel PlayerProfile7;
    private javax.swing.JLabel PlayerProfile8;
    private javax.swing.JLabel PlayerProfile9;
    private javax.swing.JButton btnback;
    private javax.swing.JButton btndataexport1;
    private javax.swing.JButton btnhistory;
    private javax.swing.JButton btnplayermanagement;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}